using System;
using System.Security.Cryptography;
using System.Security.Cryptography.X509Certificates;
using System.Text;

public class RSAEncryption
{

    public static string Encrypt(string data)
    {
        RSAParameters parameters = new RSAParameters();

        byte[] modulus = { 0x00, 0xAF, 0xEB, 0xB3, 0x61, 0x50, 0xAF, 0x5E, 0xFB, 0x58, 0x46, 0x0C, 0x37, 0x86, 0x0F, 0xEE, 0x99, 0x68, 0x6F, 0x5B, 0x5E, 0x77, 0x4F, 0xD9, 0xC3, 0xB4, 0x50, 0x7E, 0xC8, 0x03, 0x83, 0x47, 0x47, 0x87, 0x1F, 0x9A, 0xA3, 0x1B, 0x94, 0x93, 0xA2, 0x0A, 0x80, 0xF4, 0xA2, 0x37, 0x64, 0x0E, 0x42, 0xF3, 0x69, 0xBE, 0x69, 0xD5, 0x36, 0x95, 0x36, 0x41, 0x4A, 0xE3, 0x76, 0xDA, 0xBA, 0x39, 0x60, 0x3E, 0x63, 0xA4, 0x73, 0x73, 0xFC, 0x2C, 0xEA, 0x02, 0x3B, 0x96, 0x4B, 0x68, 0x2C, 0x79, 0x90, 0xF0, 0xF1, 0x05, 0xFE, 0x45, 0x1F, 0x7F, 0xBD, 0xCB, 0x80, 0x8F, 0x36, 0xD1, 0x72, 0x91, 0x93, 0x81, 0x99, 0x5D, 0xEF, 0xBE, 0xEA, 0x91, 0xCE, 0x8B, 0x5C, 0xEE, 0xFA, 0x57, 0xD6, 0x60, 0x91, 0x92, 0x64, 0xC9, 0x01, 0x6A, 0x65, 0xDB, 0x65, 0x62, 0x9F, 0x97, 0x12, 0x6B, 0xA1, 0x8A, 0x39, 0x2C, 0x2E, 0x3E, 0x57, 0x89, 0xF3, 0xFF, 0x4F, 0x45, 0x2D, 0x68, 0x4F, 0x5D, 0xAC, 0xD7, 0x9F, 0x4A, 0x6A, 0xC1, 0xE9, 0x0B, 0x66, 0xD0, 0x39, 0xC0, 0x6A, 0x50, 0x42, 0x33, 0x41, 0x11, 0x52, 0x41, 0xB2, 0x78, 0xE1, 0xAF, 0x10, 0xD5, 0x38, 0xD5, 0x03, 0xB3, 0xD8, 0x53, 0x2F, 0x98, 0xD4, 0x56, 0x6C, 0x74, 0xD4, 0xD0, 0x31, 0x7B, 0x3E, 0x68, 0xAB, 0xA7, 0x6B, 0xD3, 0x82, 0x81, 0x9A, 0x11, 0xC9, 0xB4, 0x15, 0x2A, 0x8D, 0x31, 0x7B, 0x64, 0xA0, 0x72, 0x3D, 0x1E, 0xFB, 0x29, 0xE1, 0x0F, 0xFC, 0xB3, 0x0B, 0xEE, 0x08, 0x0D, 0xD1, 0x1D, 0x66, 0x23, 0x86, 0xEC, 0xA1, 0xEB, 0x0C, 0x47, 0x39, 0x40, 0x86, 0x38, 0xED, 0xE6, 0xEA, 0x02, 0x2E, 0x68, 0xE1, 0xE3, 0xC7, 0x7A, 0xB3, 0x1A, 0xC6, 0x14, 0xF4, 0xFE, 0x28, 0xB8, 0x70, 0xA7, 0xA4, 0xC0, 0xBE, 0xC6, 0xF5, 0x3E, 0xB7 };
        byte[] exponent = { 0x01, 0x00, 0x01 };

        parameters.Modulus = modulus;
        parameters.Exponent = exponent;

        byte[] dataToEncrypt = Encoding.UTF8.GetBytes(data);
        byte[] encryptedData;
        using (var rsa = new RSACryptoServiceProvider())
        {
            rsa.ImportParameters(parameters);
            encryptedData = rsa.Encrypt(dataToEncrypt, true);
        }
        return Convert.ToBase64String(encryptedData);
    }

    public static string Decrypt(string data)
    {
        byte[] modulus = { 0x00, 0x9F, 0x84, 0xDB, 0x8B, 0xBC, 0xB0, 0xBB, 0xDF, 0x32, 0x81, 0x0D, 0xC8, 0xDC, 0xE0, 0xDC, 0xA9, 0x53, 0x38, 0xD4, 0xDF, 0xB7, 0x21, 0xA8, 0x1D, 0xD0, 0xDB, 0xFF, 0x3A, 0x20, 0x16, 0xA2, 0x84, 0x30, 0xB9, 0x70, 0xF1, 0x77, 0x14, 0x9F, 0xDB, 0xE4, 0x18, 0xF7, 0xD8, 0xA6, 0x11, 0x11, 0xF2, 0x2E, 0x03, 0x95, 0x81, 0x75, 0xCB, 0xC5, 0x34, 0x9C, 0x03, 0xDF, 0xC7, 0x88, 0x7F, 0xFC, 0x8D, 0xBE, 0x5F, 0xC5, 0x67, 0xF3, 0x19, 0x3B, 0x6A, 0x30, 0x29, 0x40, 0x42, 0xFB, 0xFC, 0x81, 0x6F, 0x3E, 0xE6, 0x6E, 0xE4, 0x68, 0x5F, 0x0B, 0xBF, 0x5F, 0x7C, 0xCF, 0xB0, 0x19, 0xD5, 0x43, 0x35, 0x23, 0x74, 0x1E, 0x87, 0xEB, 0x9A, 0x4E, 0x8A, 0xE7, 0xC1, 0xE8, 0xD5, 0x22, 0x98, 0xC0, 0xFD, 0x77, 0x20, 0xA8, 0x84, 0xFA, 0xCE, 0x5A, 0x96, 0xFC, 0xED, 0xD2, 0xA9, 0x5F, 0xB7, 0x96, 0x68, 0xA9, 0x51, 0x1C, 0x11, 0x6A, 0xFA, 0x94, 0x21, 0x63, 0x97, 0xE1, 0x2E, 0xAB, 0xEF, 0x82, 0x71, 0x7C, 0xAB, 0x74, 0xA0, 0x6A, 0xFC, 0x5F, 0xDD, 0x79, 0x0D, 0xEF, 0x94, 0x3E, 0xAC, 0x02, 0xCD, 0x97, 0xB0, 0x39, 0x5E, 0x0B, 0x42, 0x20, 0xC8, 0xAB, 0xA9, 0xAF, 0xD3, 0x20, 0x3F, 0xB1, 0xC0, 0x87, 0xD5, 0x98, 0xA2, 0x42, 0xCA, 0xAD, 0xBF, 0x3D, 0x76, 0x72, 0x5D, 0xCF, 0xBC, 0x8A, 0xB4, 0x87, 0x42, 0xBC, 0x09, 0x43, 0x4E, 0xDF, 0x08, 0xB8, 0xA5, 0xAC, 0xA3, 0xBB, 0xB4, 0xFF, 0x06, 0x37, 0x54, 0x48, 0x3B, 0x5F, 0xD5, 0xCF, 0x20, 0xBC, 0xE5, 0xD6, 0xB0, 0x78, 0xEA, 0x83, 0x08, 0x51, 0x95, 0x93, 0xAE, 0xEA, 0x49, 0xAB, 0x08, 0x86, 0x90, 0x53, 0xCD, 0xBB, 0x48, 0xF5, 0x5A, 0x08, 0xB2, 0xDE, 0xCA, 0xFD, 0x37, 0x8F, 0xC2, 0x3F, 0x8E, 0xA8, 0x50, 0x8E, 0x9D, 0x1E, 0xDD };
        byte[] exponent = { 0x01, 0x00, 0x01 };
        byte[] D = { 0x07, 0x16, 0x58, 0x49, 0xC6, 0x55, 0xA4, 0xD7, 0x37, 0x0F, 0x78, 0x4D, 0x11, 0x11, 0x35, 0x84, 0x99, 0x63, 0xB8, 0x43, 0x83, 0x47, 0xAD, 0xC8, 0x3B, 0x58, 0x16, 0xE8, 0x1E, 0x76, 0x5A, 0xFC, 0x9C, 0x0C, 0x95, 0x29, 0xC9, 0x44, 0x63, 0x90, 0xD9, 0xBA, 0xC9, 0x42, 0x39, 0x28, 0x9F, 0x7F, 0x3E, 0xCF, 0x9E, 0x74, 0x1C, 0xC7, 0x73, 0xA8, 0xD1, 0x78, 0xB3, 0x97, 0xD2, 0x26, 0xFB, 0x91, 0xD1, 0xA0, 0x40, 0x2D, 0x4C, 0xE5, 0xF5, 0x57, 0x93, 0xB1, 0xB5, 0x7E, 0xF4, 0x62, 0xA4, 0xDE, 0x8C, 0x31, 0x21, 0x42, 0xA9, 0x27, 0x75, 0xE6, 0x68, 0x07, 0xEB, 0xD3, 0x53, 0x66, 0x80, 0x00, 0xAB, 0xA5, 0x54, 0x58, 0xEE, 0x1D, 0x12, 0x39, 0xC6, 0x2F, 0xBD, 0x98, 0x40, 0x9C, 0x00, 0x51, 0x12, 0x9A, 0xA3, 0x1A, 0x1B, 0x69, 0x91, 0x29, 0x4D, 0xAE, 0x04, 0x52, 0xCD, 0xA3, 0xA2, 0xBD, 0x4C, 0x28, 0x6A, 0xEA, 0x39, 0x4C, 0x61, 0xDA, 0xD7, 0x4A, 0x19, 0x43, 0x5A, 0x8E, 0x86, 0xDC, 0x84, 0x9A, 0xAD, 0x05, 0x0A, 0xBA, 0xB0, 0x93, 0xBA, 0x21, 0xF4, 0x14, 0xFC, 0xCE, 0x47, 0x7E, 0x2E, 0xE4, 0x0A, 0x8D, 0x07, 0xAD, 0x9F, 0xD2, 0xC8, 0xC6, 0x4E, 0xE1, 0xB6, 0x3D, 0xA0, 0xAE, 0x94, 0xEF, 0x1A, 0xC1, 0x0D, 0x28, 0x23, 0x1F, 0x0B, 0x23, 0x50, 0x8D, 0x45, 0x95, 0x08, 0x2D, 0xDB, 0x47, 0x74, 0x60, 0xDF, 0x2B, 0x56, 0x49, 0x50, 0x4D, 0x89, 0x28, 0xDA, 0x88, 0x56, 0xF9, 0xFE, 0x0B, 0x5C, 0x45, 0x8E, 0x30, 0xB0, 0xB5, 0xD0, 0x55, 0x0F, 0xC9, 0xCD, 0x17, 0xDF, 0xB0, 0xBE, 0xA6, 0xE4, 0x17, 0xAC, 0x7D, 0x13, 0x4E, 0x49, 0x51, 0x64, 0x80, 0x30, 0x04, 0xEF, 0x55, 0x98, 0xE5, 0xB2, 0xEC, 0xDF, 0xAC, 0xE2, 0x7F, 0x9E, 0x1B, 0xF5, 0x00, 0x13, 0x55, 0x12, 0xD1 };
        byte[] P = { 0x00, 0xDC, 0x4D, 0xB3, 0x77, 0xE3, 0x16, 0x1A, 0xE3, 0xC5, 0xB7, 0x13, 0xDC, 0x11, 0xD1, 0x79, 0x6C, 0x37, 0x8C, 0xE1, 0x03, 0xF4, 0xD6, 0x6C, 0xF3, 0x77, 0x13, 0xC0, 0xAF, 0x0F, 0xF0, 0x4B, 0xAE, 0x3D, 0x3F, 0x6C, 0x4F, 0x4E, 0x2E, 0x7F, 0xDF, 0x85, 0xC8, 0xB2, 0x1F, 0x09, 0xA6, 0x3B, 0x0B, 0x07, 0xA4, 0xF1, 0xF0, 0xAA, 0x42, 0x2C, 0x8A, 0xE0, 0xCA, 0x19, 0xA3, 0x43, 0xAB, 0xC0, 0xF6, 0x8B, 0xFA, 0xE2, 0x12, 0xBA, 0xF5, 0x6A, 0x9D, 0x63, 0x68, 0xAB, 0xF8, 0xF7, 0x02, 0x55, 0x85, 0xE6, 0xE4, 0xF6, 0x24, 0x11, 0x8C, 0x2D, 0xA5, 0xFC, 0x54, 0xA4, 0xCE, 0xD2, 0xD1, 0x25, 0x37, 0xBD, 0x15, 0x96, 0xE4, 0x17, 0x4A, 0x5C, 0x19, 0x39, 0x8D, 0x48, 0xC7, 0xFC, 0x8D, 0xD0, 0xED, 0x7F, 0x5F, 0xAA, 0xA0, 0xA1, 0x8E, 0x1F, 0x7D, 0x67, 0xA5, 0x87, 0x7A, 0xE5, 0xCC, 0x73, 0x11 };
        byte[] Q = { 0x00, 0xB9, 0x5D, 0xC8, 0x98, 0x75, 0x00, 0x9D, 0xCB, 0xAE, 0xA1, 0xD3, 0x32, 0x0B, 0x2B, 0xA5, 0xE3, 0x23, 0x62, 0x9D, 0x92, 0x27, 0x2D, 0x10, 0xBF, 0x86, 0x2B, 0xA9, 0xBF, 0x03, 0x68, 0xCD, 0x85, 0xF7, 0x39, 0xBF, 0x18, 0x14, 0xF5, 0xF4, 0x9E, 0x46, 0x99, 0x4D, 0x01, 0x56, 0x3E, 0xD3, 0x4A, 0xBB, 0xEF, 0xE1, 0xBD, 0x73, 0x6A, 0x20, 0x41, 0xDB, 0x5B, 0x1D, 0x38, 0xB3, 0x35, 0x02, 0x8C, 0x49, 0xE5, 0xBD, 0xC1, 0x8E, 0x8D, 0x27, 0xC8, 0xB7, 0xBE, 0x55, 0xEF, 0xD5, 0x95, 0x5C, 0xB2, 0x3A, 0x8E, 0x48, 0xD8, 0x4A, 0xF2, 0x71, 0xFB, 0x05, 0xF2, 0x5B, 0x80, 0x60, 0x4C, 0x28, 0xB9, 0x0D, 0xAF, 0x6B, 0xAC, 0xDB, 0xC4, 0x71, 0x36, 0xAE, 0x41, 0xDB, 0x08, 0x83, 0x43, 0xBD, 0x01, 0x73, 0xB1, 0x56, 0x5C, 0x1C, 0x99, 0xCB, 0xA9, 0x42, 0x98, 0x35, 0xE9, 0x15, 0x18, 0xD7, 0x0D };
        byte[] DP = { 0x00, 0x89, 0x62, 0x93, 0x77, 0x42, 0x50, 0xB8, 0xB8, 0x2E, 0xC6, 0xBB, 0x45, 0xD4, 0x7E, 0xD3, 0xC0, 0x1E, 0xEC, 0x66, 0x2E, 0xF7, 0x72, 0xF9, 0x42, 0xE3, 0x91, 0x97, 0xEA, 0x14, 0x80, 0x80, 0x51, 0xCA, 0xB4, 0x50, 0xB1, 0x2C, 0x4A, 0x67, 0x48, 0x57, 0xC0, 0x0F, 0x04, 0xB8, 0x19, 0xC8, 0x5C, 0x5A, 0x8A, 0x0C, 0xAF, 0x4F, 0x1E, 0x31, 0x74, 0xF2, 0x36, 0x56, 0xC2, 0xB0, 0x22, 0xDE, 0x15, 0x62, 0xBA, 0x34, 0x5E, 0x05, 0xE5, 0xA2, 0x75, 0x40, 0x57, 0x38, 0x57, 0xEC, 0x82, 0xB2, 0x1E, 0xED, 0x1D, 0x00, 0x3B, 0x02, 0x0E, 0x6F, 0x31, 0x42, 0x28, 0xEF, 0x16, 0x63, 0xF6, 0x35, 0xC5, 0x8A, 0xCF, 0x79, 0xE8, 0x08, 0x76, 0x40, 0xF5, 0x22, 0x24, 0xEF, 0xAC, 0x77, 0xDD, 0x60, 0xDB, 0x9B, 0x41, 0x67, 0xC1, 0x00, 0xBF, 0x06, 0xF8, 0x47, 0xB8, 0xBC, 0xC2, 0x71, 0xA8, 0x8C, 0x61 };
        byte[] DQ = { 0x00, 0x90, 0x09, 0x94, 0xEF, 0x0A, 0xB3, 0xC0, 0xE9, 0xDD, 0xB7, 0xF7, 0x71, 0x42, 0x86, 0xD7, 0x2F, 0x69, 0x76, 0x9E, 0xB4, 0x4B, 0xE6, 0xD3, 0xC5, 0xCF, 0x4F, 0x2C, 0x66, 0xB6, 0x12, 0x80, 0xE9, 0x61, 0x53, 0x28, 0xEF, 0x60, 0x92, 0x42, 0x53, 0x9E, 0xCE, 0x4E, 0xAD, 0x04, 0x44, 0x6B, 0x50, 0xFE, 0x3A, 0x87, 0x71, 0xFC, 0x35, 0xF1, 0xFC, 0xDA, 0xA3, 0xB1, 0x50, 0x36, 0xC8, 0xB1, 0x43, 0x2B, 0xC4, 0xEE, 0xAF, 0x71, 0xC2, 0xB3, 0xB0, 0x5F, 0x3E, 0xF2, 0x6E, 0x1B, 0xCC, 0x25, 0x2C, 0x85, 0x1D, 0xBC, 0xF2, 0xFD, 0x41, 0xE9, 0x59, 0xC2, 0xA4, 0x31, 0x7F, 0xCE, 0xD4, 0x3F, 0x2C, 0x94, 0xBA, 0xC3, 0xF3, 0x9D, 0x0D, 0xC7, 0x5F, 0x53, 0x06, 0xEF, 0x59, 0x6D, 0x0E, 0x7C, 0xD6, 0x9C, 0xFC, 0xA6, 0xFB, 0x8A, 0x69, 0xE3, 0x7C, 0x91, 0xB7, 0xCE, 0xE4, 0x60, 0x35, 0x5E, 0x1D };
        byte[] InverseQ = { 0x60, 0x5D, 0xA2, 0x70, 0x35, 0x36, 0x22, 0xCE, 0x65, 0xC9, 0x64, 0x3D, 0x48, 0xA6, 0x7D, 0x88, 0xD6, 0x6B, 0x48, 0x07, 0x50, 0x49, 0xD5, 0x4D, 0xEA, 0xA1, 0x3F, 0x60, 0x34, 0x38, 0x5E, 0xB1, 0x76, 0x11, 0x97, 0x95, 0x50, 0x66, 0xD3, 0xF2, 0x11, 0x33, 0x67, 0xBE, 0xA4, 0xFE, 0xAE, 0x77, 0xD1, 0x8F, 0x6F, 0x28, 0x28, 0x8D, 0xD4, 0xE3, 0xB2, 0x87, 0x1C, 0xB1, 0xC5, 0x90, 0x0E, 0x27, 0x41, 0x3A, 0xC0, 0xEC, 0xE0, 0x66, 0x25, 0xE0, 0x86, 0xFA, 0x78, 0x31, 0xC0, 0xA5, 0x2E, 0x44, 0xBE, 0x2A, 0x31, 0xFB, 0x93, 0xD5, 0xDB, 0xC8, 0xE7, 0xA9, 0x90, 0x6D, 0x45, 0xA7, 0x11, 0xF7, 0xA4, 0xAE, 0x0B, 0x5C, 0x3F, 0x3A, 0x0D, 0xB8, 0x30, 0x02, 0x2A, 0xB3, 0x12, 0xB1, 0xB3, 0x6E, 0x49, 0x0D, 0x3E, 0x93, 0x86, 0x92, 0xE6, 0x10, 0x3D, 0x16, 0x38, 0x75, 0x2B, 0x06, 0x61, 0x49 };

        RSAParameters parameters = new RSAParameters();
        parameters.Modulus = modulus;
        parameters.Exponent = exponent;
        parameters.D = D;
        parameters.P = P;
        parameters.Q = Q;
        parameters.DP = DP;
        parameters.DQ = DQ;
        parameters.InverseQ = InverseQ;

        byte[] dataToDecrypt = Convert.FromBase64String(data);
        //byte[] dataToDecrypt = Encoding.UTF8.GetBytes(data);
        byte[] decryptedData;
        using (var rsa = new RSACryptoServiceProvider())
        {
            rsa.ImportParameters(parameters);
            decryptedData = rsa.Decrypt(dataToDecrypt, true);
        }
        return Convert.ToBase64String(decryptedData);
    }
}
